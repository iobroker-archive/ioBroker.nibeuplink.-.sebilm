{
  "version": 3,
  "sources": ["../src/nibe-fetcher.ts"],
  "sourcesContent": ["//\n// nibe-fetcher\n//\n// original author: Timo Behrmann (timo.behrmann@gmail.com)\n// changed by Sebastian Haesselbarth (seb@sebmail.de)\n//\n// original sources: https://github.com/z0mt3c/nibe-fetcher\n//\n// license: MIT\n//\n// this version is based on original nibe-fetcher version 1.1.0\n//\n\nimport * as utils from '@iobroker/adapter-core';\nimport axios, { AxiosError } from 'axios';\nimport * as eventEmitter from 'events';\nimport * as fs from 'fs';\nimport jsonfile from 'jsonfile';\nimport * as nibeDto from './nibeDto';\nimport * as parameters from './parameters';\n\nexport default interface Options {\n    authCode: string;\n    clientId: string;\n    clientSecret: string;\n    systemId: string;\n    redirectUri: string;\n    enableManage: boolean;\n    managedParameters: ioBroker.Parameter[];\n    interval: number;\n    language: string;\n    sessionStore: string;\n}\n\nexport interface Data {\n    unitData: nibeDto.SystemUnit[];\n    manageData?: ManageData[];\n}\n\nexport interface ManageData {\n    unit: string;\n    parameters: nibeDto.Parameter[];\n}\n\ninterface Session extends nibeDto.Session {\n    expires_at?: number;\n    expires_in?: number;\n    authCode?: string;\n    access_token?: string;\n    refresh_token?: string;\n    token_type?: string;\n    scope?: string;\n}\n\nconst consts = {\n    baseUrl: 'https://api.nibeuplink.com',\n    scope: 'READSYSTEM WRITESYSTEM',\n    timeout: 45000,\n    userAgent: 'iobroker.nibeuplink',\n    renewBeforeExpiry: 5 * 60 * 1000,\n    parameters: parameters.NibeParameters,\n};\n\nconst versionKeys = ['VERSIO', 'VERSIE', 'VARIANTA', 'WERSJA', 'VERSJON'];\nconst serialNumberKeys = ['SERIENNUMMER', 'SERIENUMMER', 'NUMER_SERYJNY', 'NUM_RO_DE_S_RIE', 'SARJANUMERO', 'S_RIOV_SLO'];\nconst productKeys = ['PRODUKT', 'PRODUIT', 'TUOTE', 'V_ROBEK'];\n\ndeclare global {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    interface Array<T> {\n        inPartsOf<T>(number: number): T[][];\n    }\n}\nArray.prototype.inPartsOf = function <T>(number: number) {\n    const parts: number = Math.floor(this.length / number); // number of parts - 1\n    const lastLength: number = this.length % number;\n    const result: T[][] = [];\n    for (let i = 0; i < parts; i++) {\n        const start: number = i * number;\n        const part: T[] = this.slice(start, start + number);\n        result.push(part);\n    }\n    if (lastLength > 0) {\n        const lastPart = this.slice(parts * number);\n        result.push(lastPart);\n    }\n    return result;\n};\n\nfunction groupBy<T, K extends keyof any>(list: T[], getKey: (item: T) => K): Record<K, T[]> {\n    return list.reduce((previous, currentItem) => {\n        const group = getKey(currentItem);\n        if (!previous[group]) previous[group] = [];\n        previous[group].push(currentItem);\n        return previous;\n    }, {} as Record<K, T[]>);\n}\n\nexport class Fetcher extends eventEmitter.EventEmitter {\n    constructor(options: Options, adapter: utils.AdapterInstance) {\n        super();\n\n        this.adapter = adapter;\n        this.options = options;\n\n        axios.defaults.baseURL = consts.baseUrl;\n        axios.defaults.headers.common['user-agent'] = consts.userAgent;\n        axios.defaults.timeout = consts.timeout;\n\n        this.start();\n    }\n\n    private adapter: utils.AdapterInstance;\n    private options: Options;\n    private interval: NodeJS.Timeout | null | undefined;\n    private active: boolean | undefined;\n    private units: nibeDto.SystemUnit[] | null | undefined;\n    private auth: Session | null | undefined;\n\n    start(): void {\n        if (this.interval != null) {\n            return;\n        }\n\n        this.active = false;\n\n        const exec = (): void => {\n            if (this.active) {\n                return;\n            }\n            this.active = true;\n            this.fetch().then(() => {\n                this.active = false;\n            });\n        };\n        this.interval = setInterval(exec, <number>this.options.interval * 1000);\n\n        exec();\n    }\n\n    stop(): void {\n        if (this.interval == null) {\n            return;\n        }\n        clearInterval(this.interval);\n        this.interval = null;\n    }\n\n    async fetch(): Promise<void> {\n        this.adapter.log.debug('Fetch data.');\n        try {\n            if (this.hasNewAuthCode()) {\n                this.clearSesssion();\n            }\n            if (!this.hasRefreshToken()) {\n                if (this.options.authCode) {\n                    const token = await this.getToken(this.options.authCode);\n                    this.setSesssion(token);\n                } else {\n                    this.adapter.log.error('You need to get and set a new Auth-Code. You can do this in the adapter setting.');\n                    this.stop();\n                    return;\n                }\n            }\n            if (this.isTokenExpired()) {\n                this.adapter.log.debug('Token is expired / expires soon - refreshing');\n                const token = await this.getRefreshToken();\n                this.setSesssion(token);\n            }\n\n            // await this._getAndWriteAllParameters();\n\n            if (this.units == null) {\n                this.units = await this.fetchUnits();\n            }\n            const unitData = await Promise.all(\n                this.units.map(async (unit) => {\n                    const categories = await this.fetchCategories(unit);\n                    const newUnit: nibeDto.SystemUnit = {\n                        systemUnitId: unit.systemUnitId,\n                        name: unit.name,\n                        shortName: unit.shortName,\n                        product: unit.product,\n                        softwareVersion: unit.softwareVersion,\n                        categories: categories,\n                    };\n                    return newUnit;\n                }),\n            );\n            const allData: Data = {\n                unitData: unitData,\n            };\n            if (this.options.enableManage == true && this.options.managedParameters != null && this.options.managedParameters.length > 0) {\n                const parametersByUnit = groupBy(this.options.managedParameters, (x) => x.unit);\n                const parametersGroups = Object.values(parametersByUnit);\n                const allManageData = await Promise.all(\n                    parametersGroups.map(async (group) => {\n                        const unit = group[0].unit;\n                        const parameters = group.map((x) => x.parameter);\n                        const result = await this.fetchParams(unit, parameters);\n                        this.processParams(result);\n                        const manageData: ManageData = {\n                            unit: unit,\n                            parameters: result,\n                        };\n                        return manageData;\n                    }),\n                );\n                allData.manageData = allManageData;\n            }\n            this.adapter.log.debug('All data fetched.');\n            this._onData(allData);\n        } catch (error) {\n            this._onError(error);\n        }\n    }\n\n    private async getToken(authCode: string): Promise<Session> {\n        this.adapter.log.debug('token()');\n        const data = {\n            grant_type: 'authorization_code',\n            client_id: this.options.clientId,\n            client_secret: this.options.clientSecret,\n            code: authCode,\n            redirect_uri: this.options.redirectUri,\n            scope: consts.scope,\n        };\n        return await this.postTokenRequest(data);\n    }\n\n    private async getRefreshToken(): Promise<Session> {\n        this.adapter.log.debug('Refresh token.');\n        const data = {\n            grant_type: 'refresh_token',\n            refresh_token: this.getSessionRefreshToken(),\n            client_id: this.options.clientId,\n            client_secret: this.options.clientSecret,\n        };\n        return await this.postTokenRequest(data);\n    }\n\n    private async postTokenRequest(body: any): Promise<Session> {\n        const stringBody = new URLSearchParams(body).toString();\n        const url = '/oauth/token';\n        try {\n            const { data } = await axios.post<Session>(url, stringBody, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n            });\n            const expiresIn = data.expires_in ?? 1800;\n            data.expires_at = Date.now() + expiresIn * 1000;\n            return data;\n        } catch (error) {\n            throw this.checkError(url, error);\n        }\n    }\n\n    private async fetchUnits(): Promise<nibeDto.SystemUnit[]> {\n        this.adapter.log.debug('Fetch units.');\n        const units = await this.getFromNibeuplink<nibeDto.SystemUnit[]>('units');\n        this.adapter.log.debug(`${units.length} units fetched.`);\n        return units;\n    }\n\n    private async fetchCategories(unit: nibeDto.SystemUnit): Promise<nibeDto.Category[]> {\n        this.adapter.log.debug('Fetch categories.');\n        const url = `serviceinfo/categories?parameters=true&systemUnitId=${unit.systemUnitId}`;\n        const categories = await this.getFromNibeuplink<nibeDto.Category[]>(url);\n        categories.forEach((category) => this.processParams(category.parameters));\n        this.adapter.log.debug(`${categories.length} categories fetched.`);\n        return categories;\n    }\n\n    private async fetchParams(unit: string, parameters: string[]): Promise<nibeDto.Parameter[]> {\n        this.adapter.log.debug(`Fetch params ${parameters} of unit ${unit}.`);\n        const result = await Promise.all(\n            parameters.inPartsOf<string>(15).map(async (p) => {\n                const paramStr = p.join('&parameterIds=');\n                const url = `parameters?parameterIds=${paramStr}&systemUnitId=${unit}`;\n                return await this.getFromNibeuplink<nibeDto.Parameter[]>(url);\n            }),\n        );\n        return result.flat();\n    }\n\n    async getParams(unit: string, parameters: string[]): Promise<void> {\n        const result = await this.fetchParams(unit, parameters);\n        this.processParams(result);\n        const manageData: ManageData = {\n            unit: unit,\n            parameters: result,\n        };\n        const data: Data = {\n            unitData: [],\n            manageData: [manageData],\n        };\n        this.adapter.log.debug('New data fetched.');\n        this._onData(data);\n    }\n\n    async setParams(unit: string, parameters: any): Promise<void> {\n        const url = `parameters?systemUnitId=${unit}`;\n        await this.putToNibeuplink(url, { settings: parameters });\n    }\n\n    private async getFromNibeuplink<T>(suburl: string, lang = ''): Promise<T> {\n        if (lang == '') {\n            lang = this.options.language;\n        }\n        const systemId = this.options.systemId;\n        const url = `/api/v1/systems/${systemId}/${suburl}`;\n        this.adapter.log.debug(`GET ${url} (lang: ${lang})`);\n        try {\n            const { data } = await axios.get<T>(url, {\n                headers: {\n                    Authorization: 'Bearer ' + this.getSessionAccessToken(),\n                    'Accept-Language': lang,\n                },\n            });\n            return data;\n        } catch (error) {\n            throw this.checkError(suburl, error);\n        }\n    }\n\n    private async putToNibeuplink(suburl: string, body: any, lang = ''): Promise<void> {\n        if (lang == '') {\n            lang = this.options.language;\n        }\n        const systemId = this.options.systemId;\n        const url = `/api/v1/systems/${systemId}/${suburl}`;\n        this.adapter.log.debug(`PUT ${url} (lang: ${lang})`);\n        this.adapter.log.silly(`PUT body: ${JSON.stringify(body, null, ' ')}`);\n        try {\n            await axios.put(url, body, {\n                headers: {\n                    Authorization: 'Bearer ' + this.getSessionAccessToken(),\n                    'Accept-Language': lang,\n                },\n            });\n        } catch (error) {\n            throw this.checkError(suburl, error);\n        }\n    }\n\n    private checkError(suburl: string, error: unknown): unknown {\n        this.adapter.log.error(`error from ${suburl}`);\n        if (axios.isAxiosError(error)) {\n            const axiosError = error as AxiosError;\n            if (axiosError.response != null) {\n                if (axiosError.response.status == 401) {\n                    this.clearSesssion();\n                }\n                if (axiosError.response.data != null) {\n                    const responseText = JSON.stringify(axiosError.response.data, null, ' ');\n                    const errorMessage = `${axiosError.response.statusText}: ${responseText}`;\n                    return new Error(errorMessage);\n                } else {\n                    return new Error(axiosError.response.statusText);\n                }\n            }\n        }\n        return error;\n    }\n\n    private processParams(params: nibeDto.Parameter[], collect = false): void {\n        params.forEach((item) => {\n            const parameters = consts.parameters.get(item.parameterId);\n            if (parameters == null) {\n                let key = item.title;\n                if (!collect && item.parameterId > 0) {\n                    key = item.parameterId + '_' + key;\n                }\n                if (item.designation != null && item.designation != '') {\n                    key = key + '_' + item.designation;\n                }\n                key = key\n                    .toUpperCase()\n                    .replace(/[^A-Z0-9_]+/gm, '_')\n                    .replace(/_{2,}/gm, '_')\n                    .replace(/_+$/gm, '');\n                if (item.parameterId == 0) {\n                    if (versionKeys.includes(key)) {\n                        key = 'VERSION';\n                    } else if (serialNumberKeys.includes(key)) {\n                        key = 'SERIAL_NUMBER';\n                    } else if (productKeys.includes(key)) {\n                        key = 'PRODUCT';\n                    }\n                }\n                Object.assign(item, { key: key });\n            } else {\n                Object.assign(item, parameters);\n            }\n\n            if (item.divideBy == null) {\n                if (item.unit == '\u00B0C' || item.unit == 'kW' || item.unit == 'kWh' || item.unit == 'l/m') {\n                    Object.assign(item, { divideBy: 10 });\n                }\n            }\n\n            if (item.divideBy != null && item.divideBy > 0) {\n                item.value = item.rawValue / item.divideBy;\n            } else {\n                item.value = item.rawValue;\n            }\n        });\n    }\n\n    private readSession(): void {\n        this.adapter.log.debug('Read session.');\n        if (!this.options.sessionStore || !fs.existsSync(this.options.sessionStore)) {\n            return;\n        }\n        this.auth = jsonfile.readFileSync(this.options.sessionStore, { throws: false });\n    }\n\n    private getSessionAuthCode(): string | undefined | null {\n        this.adapter.log.silly('Get session authCode.');\n        if (this.auth == null) {\n            this.readSession();\n        }\n        return this.auth ? this.auth.authCode : null;\n    }\n\n    private getSessionAccessToken(): string | undefined | null {\n        this.adapter.log.silly('Get session access_token.');\n        if (this.auth == null) {\n            this.readSession();\n        }\n        return this.auth ? this.auth.access_token : null;\n    }\n\n    private getSessionRefreshToken(): string | undefined | null {\n        this.adapter.log.silly('Get session refresh_token.');\n        if (this.auth == null) {\n            this.readSession();\n        }\n        return this.auth ? this.auth.refresh_token : null;\n    }\n\n    private getSessionExpires(): number | undefined | null {\n        this.adapter.log.silly('Get session expires.');\n        if (this.auth == null) {\n            this.readSession();\n        }\n        return this.auth ? this.auth.expires_at : null;\n    }\n\n    private setSesssion(auth: Session): void {\n        this.adapter.log.debug('Set session.');\n        if (auth.authCode == null) {\n            auth.authCode = this.options.authCode;\n        }\n        this.auth = auth;\n        if (!this.options.sessionStore) {\n            return;\n        }\n        jsonfile.writeFileSync(this.options.sessionStore, this.auth, { spaces: 2 });\n    }\n\n    private clearSesssion(): void {\n        this.adapter.log.debug('Clear session.');\n        this.setSesssion({});\n    }\n\n    private hasNewAuthCode(): boolean {\n        const authCode = this.getSessionAuthCode();\n        const hasNewAuthCode = authCode != null && authCode != this.options.authCode;\n        this.adapter.log.debug('Has new auth code: ' + hasNewAuthCode);\n        return hasNewAuthCode;\n    }\n\n    private isTokenExpired(): boolean {\n        const expired = (this.getSessionExpires() || 0) < Date.now() + consts.renewBeforeExpiry;\n        this.adapter.log.debug('Is token expired: ' + expired);\n        return expired;\n    }\n\n    private hasRefreshToken(): boolean {\n        const hasToken = !!this.getSessionRefreshToken();\n        this.adapter.log.debug('Has refresh token: ' + hasToken);\n        return hasToken;\n    }\n\n    private _onData(data: Data): void {\n        this.emit('data', data);\n    }\n\n    private _onError(error: unknown): void {\n        this.emit('error', error);\n    }\n\n    // async _getAndWriteAllParameters() {\n    //     let par = {};\n    //     for (let i = 40000; i < 50000; i = i + 15) {\n    //         let url = `parameters?parameterIds=${i}`;\n    //         for (let j = 1; j < 15; j++) {\n    //             url = url + `&parameterIds=${i + j}`;\n    //         }\n    //         let raw = await this.getFromNibeuplink(url, 'en');\n    //         this.adapter.log.info(`${i}: ${raw.length}`);\n    //         this.processParams(raw, true);\n    //         raw.forEach((item) => {\n    //             if (item.key != '') {\n    //                 if (item.divideBy != null) {\n    //                     par[`${item.parameterId}`] = { key: item.key, divideBy: item.divideBy };\n    //                 } else {\n    //                     par[`${item.parameterId}`] = { key: item.key };\n    //                 }\n    //             }\n    //         });\n    //     }\n    //     jsonfile.writeFileSync(path.join(__dirname, './parameters40.json'), par, { spaces: 2 });\n    //     this.stop();\n    // }\n}\n"],
  "mappings": "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",
  "names": ["axios", "parameters", "jsonfile"]
}
