{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * nibeuplink adapter\n */\n\nimport * as utils from '@iobroker/adapter-core';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as fetcher from './nibe-fetcher';\n\n// Helper functions:\n\n// For todays date;\ndeclare global {\n    interface Date {\n        today(): string;\n    }\n}\nDate.prototype.today = function (): string {\n    return (\n        this.getFullYear() +\n        '-' +\n        (this.getMonth() + 1 < 10 ? '0' : '') +\n        (this.getMonth() + 1) +\n        '-' +\n        (this.getDate() < 10 ? '0' : '') +\n        this.getDate()\n    );\n};\n\n// For the time now\ndeclare global {\n    interface Date {\n        timeNow(): string;\n    }\n}\nDate.prototype.timeNow = function (): string {\n    return (\n        (this.getHours() < 10 ? '0' : '') +\n        this.getHours() +\n        ':' +\n        (this.getMinutes() < 10 ? '0' : '') +\n        this.getMinutes() +\n        ':' +\n        (this.getSeconds() < 10 ? '0' : '') +\n        this.getSeconds()\n    );\n};\n\nasync function createDeviceAsync(adapter: NibeUplink, path: string, name: string): Promise<void> {\n    await adapter.setObjectNotExistsAsync(path, {\n        type: 'device',\n        common: {\n            name: name,\n            role: 'text',\n        },\n        native: {},\n    });\n}\n\nasync function createChannelAsync(adapter: NibeUplink, path: string, name: string): Promise<void> {\n    await adapter.setObjectNotExistsAsync(path, {\n        type: 'channel',\n        common: {\n            name: name,\n            role: 'text',\n        },\n        native: {},\n    });\n}\n\nfunction setProperty<K extends keyof any>(obj: any, propertyName: K, value: any): void {\n    obj[propertyName] = value;\n}\n\nclass NibeUplink extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'nibeuplink',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    private fetcher: fetcher.Fetcher | undefined;\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        this.log.info('Starting adapter.');\n\n        let refreshInterval: number = this.config.Interval * 60;\n        if (refreshInterval < 60) {\n            refreshInterval = 60;\n        }\n\n        const identifier: string = this.config.Identifier.trim();\n        const secret: string = this.config.Secret.trim();\n        const callbackURL: string = this.config.CallbackURL.trim();\n        const configured: boolean = this.config.Configured;\n\n        let error = false;\n        if (identifier == '' || identifier == null) {\n            if (configured != false) {\n                this.log.error('Missing Identifier in the settings!');\n            }\n            error = true;\n        }\n        if (secret == '' || secret == null) {\n            if (configured != false) {\n                this.log.error('Missing Secret in the settings!');\n            }\n            error = true;\n        }\n        if (callbackURL == '' || callbackURL == null) {\n            if (configured != false) {\n                this.log.error('Missing Callback URL in the settings!');\n            }\n            error = true;\n        }\n        if (this.config.SystemId == '' || this.config.SystemId == null) {\n            if (configured != false) {\n                this.log.error('Missing System ID in the settings!');\n            }\n            error = true;\n        }\n        if (error) {\n            this.setState('info.connection', { val: false, ack: true });\n            this.setState('info.currentError', { val: 'Missing settings!', ack: true });\n            return;\n        }\n\n        const dataDir: string = utils.getAbsoluteDefaultDataDir();\n        let storeDir: string = path.join(dataDir, 'nibeuplink');\n        try {\n            // create directory\n            if (!fs.existsSync(storeDir)) {\n                fs.mkdirSync(storeDir);\n            }\n        } catch (err) {\n            this.log.error('Could not create storage directory (' + storeDir + '): ' + err);\n            storeDir = __dirname;\n        }\n        const storeFile = path.join(storeDir, 'session.' + this.instance + '.json');\n        const manageId = !this.config.ManageId ? 'MANAGE' : this.config.ManageId;\n\n        this.fetcher = new fetcher.Fetcher(\n            {\n                clientId: identifier,\n                clientSecret: secret,\n                redirectUri: callbackURL,\n                interval: refreshInterval,\n                authCode: this.config.AuthCode.trim(),\n                systemId: this.config.SystemId,\n                language: this.config.Language,\n                enableManage: this.config.EnableManageSupport,\n                managedParameters: this.config.ManagedParameters,\n                sessionStore: storeFile,\n            },\n            this,\n        );\n\n        this.fetcher.on('data', async (d) => {\n            const data = d as fetcher.Data;\n            this.log.debug('Data received.');\n            this.log.silly(JSON.stringify(data, null, ' '));\n\n            this.setState('info.connection', { val: true, expire: refreshInterval + 30, ack: true });\n\n            const newDate = new Date();\n            const datetime = newDate.today() + ' ' + newDate.timeNow();\n            this.setState('info.updateTime', { val: datetime, ack: true });\n            this.setState('info.currentError', { val: '', ack: true });\n\n            data.unitData.forEach(async (unit) => {\n                const unitPath = `UNIT_${unit.systemUnitId}`;\n                await createDeviceAsync(this, unitPath, `${unit.name} (${unit.product})`);\n                unit.categories?.forEach(async (category) => {\n                    const categoryPath = `${unitPath}.${category.categoryId}`;\n                    await createChannelAsync(this, categoryPath, category.name);\n                    category.parameters.forEach(async (parameter) => {\n                        const key = parameter['key'];\n                        let title = parameter['title'];\n                        const designation = parameter['designation'];\n                        if (designation != null && designation != '') {\n                            title = `${title} (${designation})`;\n                        }\n                        const valuePath = `${categoryPath}.${key}`;\n\n                        await this.setObjectNotExistsAsync(valuePath, {\n                            type: 'state',\n                            common: {\n                                name: title,\n                                type: 'number',\n                                role: 'value',\n                                unit: parameter['unit'],\n                                read: true,\n                                write: false,\n                            },\n                            native: {},\n                        });\n                        await this.setStateAsync(valuePath, { val: parameter['value'], ack: true });\n\n                        const displayPath = `${categoryPath}.${key}_DISPLAY`;\n                        await this.setObjectNotExistsAsync(displayPath, {\n                            type: 'state',\n                            common: {\n                                name: `${title} [Display]`,\n                                type: 'string',\n                                role: 'text',\n                                read: true,\n                                write: false,\n                            },\n                            native: {},\n                        });\n                        await this.setStateAsync(displayPath, { val: parameter['displayValue'], ack: true });\n\n                        if (unit.systemUnitId == 0) {\n                            // update deprecated subpath values if present (pre 0.4.0):\n                            const oldValuePath = `${category.categoryId}.${key}`;\n                            this.getObject(oldValuePath, (err, obj) => {\n                                if (obj != null) {\n                                    this.setState(oldValuePath, { val: parameter['value'], ack: true });\n                                }\n                            });\n                            const oldDisplayPath = `${category.categoryId}.${key}_DISPLAY`;\n                            this.getObject(oldDisplayPath, (err, obj) => {\n                                if (obj != null) {\n                                    this.setState(oldDisplayPath, { val: parameter['displayValue'], ack: true });\n                                }\n                            });\n                        }\n                    });\n                });\n            });\n            if (data.manageData != null) {\n                const manageName = !this.config.ManageName ? 'Manage' : this.config.ManageName;\n                await createDeviceAsync(this, manageId, manageName);\n                data.manageData.forEach(async (manageData) => {\n                    const unit = manageData.unit;\n                    manageData.parameters.forEach(async (parameter) => {\n                        const parameterId = parameter.parameterId.toString();\n                        const conf = this.config.ManagedParameters.find((x) => x.unit == unit && x.parameter == parameterId);\n                        let key;\n                        if (conf != null && conf.id) {\n                            key = conf.id;\n                        } else {\n                            key = `${unit}_${parameterId}_${parameter.key}`;\n                        }\n                        let title;\n                        if (conf != null && conf.name) {\n                            title = conf.name;\n                        } else {\n                            title = parameter.title;\n                            const designation = parameter.designation;\n                            if (designation != null && designation != '') {\n                                title = `${title} (${designation})`;\n                            }\n                        }\n                        const valuePath = `${manageId}.${key}`;\n\n                        await this.setObjectNotExistsAsync(valuePath, {\n                            type: 'state',\n                            common: {\n                                name: title,\n                                type: 'number',\n                                role: 'value',\n                                unit: parameter['unit'],\n                                read: true,\n                                write: true,\n                            },\n                            native: {\n                                deviceUnit: unit,\n                                parameterId: parameter.parameterId,\n                                divideBy: parameter.divideBy,\n                            },\n                        });\n                        await this.setStateAsync(valuePath, { val: parameter['value'], ack: true });\n\n                        const displayPath = `${manageId}.${key}_DISPLAY`;\n                        await this.setObjectNotExistsAsync(displayPath, {\n                            type: 'state',\n                            common: {\n                                name: `${title} [Display]`,\n                                type: 'string',\n                                role: 'text',\n                                read: true,\n                                write: false,\n                            },\n                            native: {},\n                        });\n                        await this.setStateAsync(displayPath, { val: parameter['displayValue'], ack: true });\n                    });\n                });\n            }\n            this.log.debug('Data processed.');\n        });\n\n        this.fetcher.on('error', (data) => {\n            this.log.error('' + data);\n\n            this.setState('info.connection', { val: false, ack: true });\n\n            const newDate = new Date();\n            const datetime = newDate.today() + ' ' + newDate.timeNow();\n            this.setState('info.lastErrorTime', { val: datetime, ack: true });\n            this.setState('info.lastError', { val: '' + data, ack: true });\n            this.setState('info.currentError', { val: '' + data, ack: true });\n        });\n\n        if (this.config.EnableManageSupport === true) {\n            this.subscribeStates(`${manageId}.*`);\n        }\n\n        this.log.info('Adapter started.');\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            if (this.fetcher != null) {\n                this.fetcher.stop();\n            }\n            this.fetcher = undefined;\n            this.setState('info.connection', { val: false, ack: true });\n            this.log.info('Cleaned everything up...');\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state != null && state.ack === false && state.val != null && this.fetcher != null) {\n            this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n            const obj = await this.getObjectAsync(id);\n            if (\n                obj != null &&\n                obj.native != null &&\n                obj.native.parameterId != null &&\n                obj.native.parameterId != '' &&\n                obj.native.deviceUnit != null &&\n                obj.native.deviceUnit != ''\n            ) {\n                const params = {};\n                const parameterId = obj.native.parameterId as number;\n                setProperty(params, parameterId.toString(), state.val.toString());\n                try {\n                    await this.fetcher.setParams(obj.native.deviceUnit, params);\n                } catch (error) {\n                    const errorPath = `${id}_ERROR`;\n                    await this.setObjectNotExistsAsync(errorPath, {\n                        type: 'state',\n                        common: {\n                            name: `${obj.common.name} [Error]`,\n                            type: 'string',\n                            role: 'text',\n                            read: true,\n                            write: false,\n                        },\n                        native: {},\n                    });\n                    const errorMessage = error instanceof Error ? error.message : String(error);\n                    await this.setStateAsync(errorPath, { val: errorMessage, ack: true });\n                }\n                await this.fetcher.getParams(obj.native.deviceUnit, [obj.native.parameterId]);\n            }\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new NibeUplink(options);\n} else {\n    // otherwise start the instance directly\n    (() => new NibeUplink())();\n}\n"],
  "mappings": "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",
  "names": ["path"]
}
